10 call turbo on
11 DEFINT A-Z
15 GOSUB 6000
20 GOTO 4000

90  'One time init for the game
90 ON SPRITE GOSUB 490
91 Y!=180: TM=1

100 ' GAME LOOP
101 ON stick(SS) GOTO 110, 120, 130, 140, 150, 160, 170, 180
102 GOTO 200
110 AY!=AY!-0.5:GOTO 200
120 AY!=AY!-0.5:AX!=AX!+0.5:GOTO 200
130 AX!=AX!+0.5:GOTO 200
140 AY!=AY!+0.5:AX!=AX!+0.5:GOTO 200
150 AY!=AY!+0.5:GOTO 200
160 AY!=AY!+0.5:AX!=AX!-0.5:GOTO 200
170 AX!=AX!-0.5:GOTO 200
180 AY!=AY!-0.5:AX!=AX!-0.5:GOTO 200

200 x!=x!+AX!:Y!=Y!+AY!
201 X=X!:Y=Y!
203 AX!=AX!*0.9:AY!=AY!*0.9
210 if strig(SS) then ba=0
220 if pc=0 goto 230
221 py=py+1
222 if py>184 THEN py=0:pc=0:px=200
230 if x!<8 then x!=8:AX!=0
231 if x!>152 then x!=152:AX!=0
239 if ba>0 then bx=ba+x:GOTO 360
240 by=by+vy
250 bx=bx+vx
300 ' TODO: Consider the borders of the screen to be undestructible bricks instead
300 if bx>178 THEN bx=178:vx=-vx
310 if bx<8 THEN bx=8:vx=-vx
321 if by>184 goto 600
330 if by<8 THEN by=8: vy=-vy
360 ' Drawing step
360 SPRITE OFF
361 put sprite 4,(bx,by),pb,0
362 put sprite 1,(x,y),15,1
363 put sprite 2,(x+16,y),15,2
364 put sprite 3,(px,py),pc,3
366 put sprite 5,(xb,yb),cb,bb+4
370 SPRITE ON
380 if bb=10 then cb=0 else bb=bb+1
400 ' BALL - TILE detection
410 if vx>0 THEN sa=(bx+6-8)\16 ELSE sa=(bx-1-8)\16
411 sb=(by+3)\8
412 v=VPEEK(&H1800+sa*2+1+sb*32)
413 if v>9 AND v<48 THEN vx=-vx:GOSUB 650
415 if vy>0 THEN sb=(by+6)\8 ELSE sb=(by-1)\8
416 sa=(bx+3-8)\16
420 v=VPEEK(&H1800+sa*2+1+sb*32)
421 if v>9 AND v<48 THEN vy=-vy:GOSUB 650

440 IF TIME<3 THEN 440 ELSE TIME=0:TL=TL+1
441 IF TL=100 THEN TL=0:GOSUB 451

450 goto 100

451 TM=TM+1
454 '  if k MOD 2=0 THEN cn=96+(l MOD 3)*2:nc=cn+1 ELSE cn=97+(l MOD 3)*2:nc=cn-1

455 'SCROLL THE BRICKS
456 FOR TY=23 TO 1 STEP -1
457   FOR TX=0 TO 23
458     TT=VPEEK (&H1800+TX+(TY-1)*32)
459     VPOKE &H1800+TX+TY*32, TT
460   NEXT TX
461 NEXT TY
462 km=TM MOD 5
463 if km>2 then VPOKE &H1800,12-km: VPOKE &H1800+23,12-km else VPOKE &H1800,6: VPOKE  &H1800+23,7
464 if TM MOD 2 = 0 THEN SWAP cn,nc
466 FOR TX=1 TO 21 STEP 2
468   VPOKE &H1800+TX,cn:VPOKE &H1800+TX+1,nc
469 NEXT TX
470 'If the paddle was pushed, push it TODO
480 'SWAP THE BG
489 RETURN

490 'Sprite COLISION
490 SPRITE OFF
491 ' Can be paddle Vs Ball TODO
491 IF x!+32>=bx AND x!<=bx+7 AND Y+4>=by AND Y<=by+7 THEN GOSUB 499
492 ' Can be paddle with POWERUP TODO
493 RETURN

499 'Range of hit is from x-7, x+32. Mapped to d into (-20, 19)
500 'TODO Make it go downwards if it makes sense
500 if pb=7 then ba=bx-x: by=y-7
501 d=bx-x-13
510 if d<-14 then vy=-1:vx=-4:return
511 if d<-6 then vy=-3:vx=-3:return
512 if d<0 then vy=-4:vx=-1:return
513 if d<6 then vy=-4:vx=1:return
514 if d<14 then vy=-3:vx=3:return
516 vy=-1:vx=4
549 RETURN

550 'POWERUP CAPTURED
551 if pb=pc THEN sc=sc+200 ELSE sc=sc+100
555 GOSUB 777
560 pb=pc
590 py=0:px=200:pc=0
599 RETURN

600 ' LOST A LIFE
601 put sprite 4,(0,0),0,0
602 put sprite 3,(0,0),0,0
603 put sprite 1,(0,0),0,0
604 put sprite 2,(0,0),0,0
605 if pl=0 GOTO 2500
606 ' Move the pad to the center
607 if x!>=87 THEN x!=x!-0.5 
608 if x!=<85 THEN x!=x!+0.5
609 put sprite 1,(x!,170),15,1
610 put sprite 2,(x!+16,170),15,2
611 if x!>=87 OR x!<=85 GOTO 607
612 pl=pl-1
613 TX=24+(pl MOD 3)*2:TY=8+(pl)\3
614 FOR j=60 to 63
615   for k=0 to 100:NEXT K:T$=CHR$(j):GOSUB 9090
616 NEXT J
617 T$=" ":GOSUB 9090
618 bx=102:by=172:vx=1:vy=-4
619 x!=86:Y!=180:AX!=0
620 px=0:py=0:pc=0:pb=15
621 pm=0:ba=bx-x!
630 GOTO 100

650 ' BRICK HIT at sa, sb
650 SOUND 13, 9
651 bc=(v-8)/2:nc=1
652 if bc>7 THEN bb=0:xb=sa*16+8:yb=sb*8:cb=15
653 if bc=9 THEN RETURN
655 if bc=8 THEN nc=7
656 IF nc=1 GOTO 680
660 VPOKE &H1800+sa*2+1+sb*32,nc*2+8:VPOKE &H1800+sa*2+2+sb*32,nc*2+8+1
670 RETURN
680 NB=NB-1
685 if pc=0 AND rnd(time)>0.8 then GOSUB 700
686 if pb=8 THEN IF sb=(by+3)\8 THEN vx=-vx ELSE vy=-vy
687 if sb MOD 2 = 0 THEN nc=97+(l MOD 3)*2:cn=96+(l MOD 3)*2 ELSE nc=96+(l MOD 3)*2:cn=97+(l MOD 3)*2
689 VPOKE &H1800+sa*2+1+sb*32,NC:VPOKE &H1800+sa*2+2+sb*32,CN
690 if pb=11 THEN sc=sc+10*bc*2 ELSE sc=sc+10*bc
691 GOSUB 777
698 IF NB=0 THEN L=L+1:GOSUB 800
699 RETURN

700 'POWERUP falls
710 px=(sa*16)+8:py=sb*8
720 pr=rnd(time)
730 if pr<0.3 THEN pc=11:RETURN
740 if pr<0.6 THEN pc=8:RETURN
750 pc=7:RETURN

777 'Update and display score
780 if sc>1000 then sd=sd+1:sc=sc-1000:se=1
785 if se=0 GOTO 790
786 TS$=STR$(sd):T$=RIGHT$(TS$,LEN(TS$)-1):TX=27-LEN(T$):TY=2:se=0:GOSUB 9090
787 if sd>=nl THEN pl=pl+1:nl=nl*2:GOSUB 4300
788 T$="000":TY=2:TX=27:GOSUB 9090
790 TS$=STR$(sc):T$=RIGHT$(TS$,LEN(TS$)-1): TX=30-LEN(T$):TY=2:GOSUB 9090
799 RETURN

800 ' LOAD AND DRAW LEVEL
800 SPRITE OFF
801 put sprite 4,(0,0),0,0
802 put sprite 1,(0,0),0,0
803 put sprite 2,(0,0),0,0
804 put sprite 3,(0,0),0,0
805 GOSUB 3900
806 T$="STAGE:":TX=10:TY=8:GOSUB 9090
807 T$=STR$(L):TX=16-LEN(T$):TY=10:GOSUB 9090
808 FOR I=0 TO 5000:NEXT I
809 GOSUB 3900:GOSUB 4200
810 T$="STAGE:":TX=24:TY=18:GOSUB 9090
811 T$=STR$(L):TX=30-LEN(T$):TY=20:GOSUB 9090
812 LM=L MOD 5
813 restore 900 
819 NB=0
820 FOR J=1 TO 13
821   FOR I=0 TO 10
823     READ C
832     IF C>0 THEN VPOKE &H1800+i*2+1+j*32,c*2+8:VPOKE &H1800+i*2+2+j*32,c*2+9: IF C<>9 THEN NB=NB+1
840   NEXT I
841 NEXT J
875 bx=102:by=172:vx=1:vy=-4
876 x!=86:Y!=180:AX!=0:TM=1
877 px=0:py=0:pc=0:pb=15
878 pm=0:ba=bx-x!
890 RETURN

898 ' DATA for levels
899 ' Stage 1: The wall
900 DATA 0,0,0,0,0,0,0,0,0,0,0
901 DATA 0,0,0,0,0,0,0,0,0,0,0
902 DATA 1,1,1,1,1,1,1,1,1,1,1
903 DATA 2,2,2,2,2,2,2,2,2,2,2
904 DATA 3,3,3,3,3,3,3,3,3,3,3
905 DATA 4,4,4,4,4,4,4,4,4,4,4
906 DATA 5,5,5,5,5,5,5,5,5,5,5
907 DATA 6,6,6,6,6,6,6,6,6,6,6
908 DATA 0,0,0,0,0,0,0,0,0,0,0
909 DATA 0,0,0,0,0,0,0,0,0,0,0
910 DATA 0,0,0,0,0,0,0,0,0,0,0
911 DATA 0,0,0,0,0,0,0,0,0,0,0
912 DATA 0,0,0,0,0,0,0,0,0,0,0

2500 ' Game over screen
2550 GOSUB 3900
2560 T$="GAME OVER":TX=10:TY=5:GOSUB 9090
2580 T$="SCORE:":TX=5:TY=10:GOSUB 9090
2581 T$="000000":TX=5:TY=12:GOSUB 9090
2582 TS$=STR$(sd):T$=RIGHT$(TS$,LEN(TS$)-1):TX=8-LEN(T$):TY=12:GOSUB 9090
2583 TS$=STR$(sc):T$=RIGHT$(TS$,LEN(TS$)-1):TX=11-LEN(T$):TY=12:GOSUB 9090
2591 T$="STAGE:":TX=19:TY=10: GOSUB 9090
2592 T$=STR$(l):TX=25-LEN(T$):TY=12:GOSUB 9090
2593 T$="PRESS ANY KEY":TX=9:TY=18:GOSUB 9090
2690 if inkey$<>"" goto 2690
2691 if inkey$="" goto 2691
2700 GOTO 4000

3900 'CLS
3910 FOR I=0 TO 767
3920   VPOKE &H1800+I,59
3930 NEXT I
3950 RETURN

4000 ' START SCREEN
4002 GOSUB 3900
4004 for i=128 to 248
4005   VPOKE &H1802+i,i
4006   VPOKE &H1800+512+12+i,i
4009 next i
4011 T$="PRESS SPACE TO START":TX=5:TY=14:GOSUB 9090
4019 if inkey$<>"" goto 4019
4020 A$=inkey$
4031 'if A$="q" then END
4032 if strig(0) THEN SS=0:GOTO 4050
4033 IF strig(1) THEN SS=1:GOTO 4050
4040 GOTO 4020
4050 L=1:sc=0:sd=0:pl=2:nl=5
4051 TX=5:TY=14
4053 for k=0 to 900 
4054   if k MOD 200=0 then  T$ = "                    ":GOSUB 9090
4055   if k MOD 200=80 then T$ = "PRESS SPACE TO START":GOSUB 9090
4059 next k
4080 GOSUB 800
4090 GOTO 90

4100 ' DRAW THE TOP OF THE GRID
4101 RESTORE 4110
4110 DATA 1, 3, 3, 4, 5, 3, 3, 3, 4, 5, 3, 3
4111 DATA 3, 3, 4, 5, 3, 3, 3, 4, 5, 3, 3, 2
4112 FOR I=0 TO 23
4113   READ BG
4114   VPOKE &H1800+i,BG
4119 NEXT I

4200 FOR K=0 TO 23
4201   km=(k+1) MOD 5
4202   if km>2 then VPOKE &H1800+K*32,5+km else VPOKE &H1800+K*32,6
4203   if k MOD 2=0 THEN cn=96+(l MOD 3)*2:nc=cn+1 ELSE cn=97+(l MOD 3)*2:nc=cn-1
4210   FOR I=1 TO 22 step 2
4211     VPOKE &H1800+i+K*32,cn:VPOKE &H1800+i+1+K*32,nc
4212   NEXT I
4213   if km>2 then VPOKE &H1800+23+K*32,5+km else VPOKE &H1800+23+K*32,7
4214 NEXT K
4220 T$="SCORE:":TX=24:TY=0:GOSUB 9090
4221 T$="000000":TX=24:TY=2:GOSUB 9090:se=1:GOSUB 777
4222 T$="LIVES:":TX=24:TY=6:GOSUB 9090
4223 GOSUB 4300
4299 RETURN

4300 'Draw lives
4301 T$="< "
4310 for j=0 to pl-1
4320   TX=24+(j MOD 3)*2
4330   TY=8+j\3:GOSUB 9090
4340 NEXT j
4390 RETURN

6000 ' LOAD SPRITES (TODO: Move to a file)
6010 RESTORE 7510
6060 FOR S=4 TO 13
6061   A$=""
6062   FOR I=1 TO 32
6063     READ L:A$=A$+CHR$(L)
6064   NEXT I
6065   SPRITE$(S)=A$
6066 NEXT S
6070 ' Init PSG
6071 SOUND 0,&hAC ' 8 least significant bits of frequency on channel A
6072 SOUND 1,1 ' 4 most significant bits of frequency on channel A

6073 SOUND 8,&b11100 ' Sets the volume to 12 on channel A -> Required for envelope!!
6074 SOUND 12,16
6075 SOUND 11,1
6076 SOUND 13, 9
6077 SOUND 7,&b10111110

6090 RETURN

7509 ' Brick blinking (10 sprites)
7510 DATA &H03,&H03,&H07,&H07,&H0F,&H0F,&H1F,&H1F,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7520 DATA &HF8,&HF8,&HF0,&HF0,&HE0,&HE0,&HC0,&HC0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7530 DATA &HBC,&HBC,&H78,&H78,&HF0,&HF0,&HE0,&HE0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7550 DATA &H0F,&H0F,&H1E,&H1E,&H3C,&H3C,&H78,&H78,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7560 DATA &H07,&H07,&H0F,&H0F,&H1E,&H1E,&H3D,&H3D,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7540 DATA &H1E,&H1E,&H3C,&H3C,&H78,&H78,&HF0,&HF0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7570 DATA &H1E,&H1E,&H3C,&H3C,&H78,&H78,&HF0,&HF0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7580 DATA &H0F,&H0F,&H1E,&H1E,&H3C,&H3C,&H78,&H78,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7590 DATA &H3C,&H3C,&H78,&H78,&HF0,&HF0,&HE0,&HE0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7600 DATA &H07,&H07,&H0F,&H0F,&H1E,&H1E,&H3C,&H3C,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7610 DATA &H78,&H78,&HF0,&HF0,&HE0,&HE0,&HC0,&HC0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7620 DATA &H03,&H03,&H07,&H07,&H0F,&H0F,&H1E,&H1E,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7630 DATA &HF0,&HF0,&HE0,&HE0,&HC0,&HC0,&H80,&H80,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7640 DATA &H01,&H01,&H03,&H03,&H07,&H07,&H0F,&H0F,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7650 DATA &HE0,&HE0,&HC0,&HC0,&H80,&H80,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7660 DATA &H00,&H00,&H01,&H01,&H03,&H03,&H07,&H07,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7670 DATA &H00,&H00,&H00,&H00,&H01,&H01,&H03,&H03,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7690 DATA &HC0,&HC0,&H80,&H80,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7680 DATA &H80,&H80,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00
7700 DATA &H00,&H00,&H00,&H00,&H00,&H00,&H01,&H01,&H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00

9090 FOR i=1 to LEN(T$)
9091   CT$=MID$(T$,i,1)
9092   VPOKE &H1800+tx+ty*32+i,ASC(CT$)
9093 NEXT I
9094 RETURN
